stack = [0] * 256
pointer = 0
output = ''

program = '''游녤游녤游녤游녤游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游대08游녨游대34游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녨游대48游녤游대15游녨游대5e游녣游대07游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游대02游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녨游대42游녤游대02游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游대17游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녣游대14游녨游대20游녤游대06游녨游대51游녤游대0c游녨游대34游녤游녤游녨游대46游녣游대14游녨游대4d游녣游대01游녨游대51游녤游대04游녨游대20游녤游대03游녨游대2f游녤游녤游녤游녤游녤游녤游녤游녤游녨游대4d游녣游대17游녨游대42游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녨游대7c游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游대0c游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游대0c游녨游대32游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游대04游녨游대5e游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녨游대47游녣游대0f游녨游대46游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녤游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녣游대03游녨游대20游녣游대08游녨游대5e游녤游대10游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녣游대1d游녨游대40游녤游대10游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녨游녤游녤游녤游녤游녨游대5e游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游녣游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫游녤游눫'''

i = 0
program_length = len(program)

instruction_list = []

while i < program_length:
    if program[i] in ('游녤', '游녣', '游녨', '游녩', '游눫'):
        instruction_list.append(program[i])
        i += 1
    elif program[i] == '游대':
        count_str = program[i + 1:i + 3]
        count = int(count_str, 16)
        instruction_list.append(('REPEAT', count))
        i += 3
    else:
        i += 1

pc = 0
while pc < len(instruction_list):
    instr = instruction_list[pc]
    if instr == '游녤':
        pointer = (pointer + 1) % 256
        pc += 1
    elif instr == '游녣':
        pointer = (pointer - 1) % 256
        pc += 1
    elif instr == '游녨':
        stack[pointer] = (stack[pointer] + 1) % 256
        pc += 1
    elif instr == '游녩':
        stack[pointer] = (stack[pointer] - 1) % 256
        pc += 1
    elif instr == '游눫':
        output += chr(stack[pointer])
        pc += 1
    elif isinstance(instr, tuple) and instr[0] == 'REPEAT':

        if pc == 0:
            print('Error: REPEAT at the beginning of the program')
            pc += 1
        else:
            prev_instr = instruction_list[pc - 1]
            count = instr[1]
            for _ in range(count):
                if prev_instr == '游녤':
                    pointer = (pointer + 1) % 256
                elif prev_instr == '游녣':
                    pointer = (pointer - 1) % 256
                elif prev_instr == '游녨':
                    stack[pointer] = (stack[pointer] + 1) % 256
                elif prev_instr == '游녩':
                    stack[pointer] = (stack[pointer] - 1) % 256
                elif prev_instr == '游눫':
                    output += chr(stack[pointer])
                else:
                    print(
                        f'Error: Invalid instruction to repeat: {prev_instr}')
            pc += 1
    else:
        print(f'Error: Unknown instruction at pc={pc}: {instr}')
        pc += 1

print('Flag:', output)
